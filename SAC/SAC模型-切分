{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM8OT6+9aPoeaO719aT8VVj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 安裝"],"metadata":{"id":"5vPOfj-e-K9g"}},{"cell_type":"code","execution_count":71,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Aq0GDtpXUYCD","executionInfo":{"status":"ok","timestamp":1727059981624,"user_tz":-480,"elapsed":14138,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}},"outputId":"842ec633-1295-4dd2-a954-0bb2cd157072"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: yfinance in /usr/local/lib/python3.10/dist-packages (0.2.43)\n","Requirement already satisfied: ta in /usr/local/lib/python3.10/dist-packages (0.11.0)\n","Requirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.1.4)\n","Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.10/dist-packages (from yfinance) (1.26.4)\n","Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.32.3)\n","Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.10/dist-packages (from yfinance) (0.0.11)\n","Requirement already satisfied: lxml>=4.9.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.9.4)\n","Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.3.6)\n","Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2024.2)\n","Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.4.4)\n","Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.10/dist-packages (from yfinance) (3.17.6)\n","Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.12.3)\n","Requirement already satisfied: html5lib>=1.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (1.1)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.6)\n","Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.10/dist-packages (from html5lib>=1.1->yfinance) (1.16.0)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from html5lib>=1.1->yfinance) (0.5.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.0->yfinance) (2.8.2)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.0->yfinance) (2024.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (2024.8.30)\n","Requirement already satisfied: gymnasium in /usr/local/lib/python3.10/dist-packages (0.29.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (1.26.4)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (2.2.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (4.12.2)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (0.0.4)\n","Requirement already satisfied: stable-baselines3 in /usr/local/lib/python3.10/dist-packages (2.3.2)\n","Requirement already satisfied: shimmy in /usr/local/lib/python3.10/dist-packages (1.3.0)\n","Collecting shimmy\n","  Using cached Shimmy-2.0.0-py3-none-any.whl.metadata (3.5 kB)\n","Requirement already satisfied: gymnasium<0.30,>=0.28.1 in /usr/local/lib/python3.10/dist-packages (from stable-baselines3) (0.29.1)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from stable-baselines3) (1.26.4)\n","Requirement already satisfied: torch>=1.13 in /usr/local/lib/python3.10/dist-packages (from stable-baselines3) (2.4.1+cu121)\n","Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from stable-baselines3) (2.2.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from stable-baselines3) (2.1.4)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from stable-baselines3) (3.7.1)\n","INFO: pip is looking at multiple versions of shimmy to determine which version is compatible with other requirements. This could take a while.\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium<0.30,>=0.28.1->stable-baselines3) (4.12.2)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from gymnasium<0.30,>=0.28.1->stable-baselines3) (0.0.4)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.13->stable-baselines3) (3.16.1)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.13->stable-baselines3) (1.13.2)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.13->stable-baselines3) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.13->stable-baselines3) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.13->stable-baselines3) (2024.6.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->stable-baselines3) (1.3.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->stable-baselines3) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->stable-baselines3) (4.53.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->stable-baselines3) (1.4.7)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->stable-baselines3) (24.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->stable-baselines3) (10.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->stable-baselines3) (3.1.4)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->stable-baselines3) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->stable-baselines3) (2024.2)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->stable-baselines3) (2024.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->stable-baselines3) (1.16.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.13->stable-baselines3) (2.1.5)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.13->stable-baselines3) (1.3.0)\n","Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.4.1+cu121)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.16.1)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.12.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.13.2)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2024.6.1)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (2.1.5)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch) (1.3.0)\n"]}],"source":["!pip install yfinance ta\n","!pip install gymnasium --upgrade\n","!pip install stable-baselines3 shimmy --upgrade\n","!pip install torch"]},{"cell_type":"markdown","source":["# 載入"],"metadata":{"id":"hjrZM5qW-daD"}},{"cell_type":"code","source":["import yfinance as yf\n","import numpy as np\n","import pandas as pd\n","import ta\n","from stable_baselines3 import SAC\n","from stable_baselines3.common.vec_env import DummyVecEnv\n","import gymnasium as gym\n","from gym import Env,spaces\n"],"metadata":{"id":"5iigSV_DUdVG","executionInfo":{"status":"ok","timestamp":1727059308637,"user_tz":-480,"elapsed":388,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}}},"execution_count":62,"outputs":[]},{"cell_type":"markdown","source":["# 資料取得"],"metadata":{"id":"1tRXqd2n_ILw"}},{"cell_type":"code","source":["# 股票代码和期間\n","tickers = ['META', 'AAPL', 'AMZN', 'MSFT', 'GOOG']\n","start_date = '2010-01-01'\n","end_date = '2020-12-31'\n","\n","# 下載股票數據\n","data = yf.download(tickers, start=start_date, end=end_date)\n","\n","# 獲取 Adj Close、High 和 Low\n","close_data = data['Adj Close']\n","high_data = data['High']\n","low_data = data['Low']\n","\n","# 計算每日收益率和對數收益率\n","daily_return = close_data.pct_change()\n","log_return = np.log(close_data / close_data.shift(1))\n","\n","# 每日收益率和對數收益率添加到 DataFrame 中\n","close_data = pd.concat(\n","    [close_data, daily_return.add_suffix('_Daily Return'), log_return.add_suffix('_Log Return')],\n","    axis=1\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dTqx7q9mUe2X","executionInfo":{"status":"ok","timestamp":1727063404898,"user_tz":-480,"elapsed":717,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}},"outputId":"ce75522e-dc1e-4303-96ed-3c1cbf418654"},"execution_count":101,"outputs":[{"output_type":"stream","name":"stderr","text":["[*********************100%***********************]  5 of 5 completed\n"]}]},{"cell_type":"markdown","source":["# 設計觀測值\n"],"metadata":{"id":"DM08blWP_1Oq"}},{"cell_type":"code","source":["# 每支股票計算技術指標\n","for ticker in tickers:\n","    # 移动平均线 (50天窗口)\n","    close_data[f'{ticker}_MA'] = close_data[ticker].rolling(window=50).mean()\n","\n","    # 相对强弱指数 (RSI, 14天窗口)\n","    close_data[f'{ticker}_RSI'] = ta.momentum.RSIIndicator(close_data[ticker], window=14).rsi()\n","\n","    # 顺势指数 (CCI, 20天窗口)\n","    close_data[f'{ticker}_CCI'] = ta.trend.CCIIndicator(high=high_data[ticker], low=low_data[ticker], close=close_data[ticker], window=20).cci()\n","\n","    # 平均趋向指数 (ADX)\n","    close_data[f'{ticker}_ADX'] = ta.trend.ADXIndicator(high=high_data[ticker], low=low_data[ticker], close=close_data[ticker]).adx()\n","\n","    # 布林通道 (20天窗口)\n","    bb = ta.volatility.BollingerBands(close_data[ticker], window=20)\n","    close_data[f'{ticker}_BB High'] = bb.bollinger_hband()\n","    close_data[f'{ticker}_BB Low'] = bb.bollinger_lband()\n","\n","    # MACD (标准窗口)\n","    macd = ta.trend.MACD(close_data[ticker])\n","    close_data[f'{ticker}_MACD'] = macd.macd()\n","    close_data[f'{ticker}_MACD Signal'] = macd.macd_signal()\n","\n","# 协方差矩阵 (使用百分比变化计算协方差)\n","cov_matrix = close_data[[ticker for ticker in tickers]].pct_change().cov()\n","\n","# 删除缺失值\n","close_data = close_data.dropna()"],"metadata":{"id":"mv4bNENVUiyL","executionInfo":{"status":"ok","timestamp":1727063448899,"user_tz":-480,"elapsed":2324,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}}},"execution_count":102,"outputs":[]},{"cell_type":"markdown","source":["# 切分資料集"],"metadata":{"id":"x1Pn-hZfB2cL"}},{"cell_type":"code","source":["# 切分数据集 80% 训练集，20% 测试集\n","train_size = int(len(close_data) * 0.8)\n","train_data = close_data.iloc[:train_size]\n","test_data = close_data.iloc[train_size:]"],"metadata":{"id":"6T7FvjvZUsUq","executionInfo":{"status":"ok","timestamp":1727059336598,"user_tz":-480,"elapsed":415,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}}},"execution_count":66,"outputs":[]},{"cell_type":"markdown","source":["# 定義投資組合環境"],"metadata":{"id":"Ybz3cwYsB7xM"}},{"cell_type":"code","source":["class PortfolioEnv(gym.Env):\n","    def __init__(self, data):\n","        super(PortfolioEnv, self).__init__()\n","        self.data = data\n","        self.n_assets = len(tickers)\n","\n","        self.action_space = spaces.Box(low=0.0, high=1.0, shape=(self.n_assets,), dtype=np.float32)\n","        self.observation_space = spaces.Box(low=-np.inf, high=np.inf, shape=(self.n_assets * 2,), dtype=np.float32)\n","\n","        self.start_index = 0\n","        self.current_step = self.start_index\n","        self.initial_balance = 1000000\n","        self.balance = self.initial_balance\n","        self.portfolio_weights = np.array([1 / self.n_assets] * self.n_assets)\n","\n","    def reset(self, seed=None, **kwargs):\n","        self.current_step = self.start_index\n","        self.balance = self.initial_balance\n","        self.portfolio_weights = np.array([1 / self.n_assets] * self.n_assets)\n","        return self.get_obs(), {}  # Return the observation and an empty info dict\n","\n","    def step(self, action):\n","        action = action / np.sum(action)  # Normalize\n","        self.portfolio_weights = action\n","\n","        if self.current_step >= len(self.data) - 1:\n","            done = True\n","            obs = self.get_obs()\n","            return obs, 0, done, {}\n","\n","        returns = self.data.iloc[self.current_step + 1][tickers].pct_change().values\n","        portfolio_return = np.dot(self.portfolio_weights, returns)\n","        reward = self.balance * portfolio_return\n","        self.balance += reward\n","        self.current_step += 1\n","        done = self.current_step >= len(self.data) - 1\n","        obs = self.get_obs()\n","        return obs, reward, done, {}\n","\n","    def get_obs(self):\n","        obs = []\n","        for ticker in tickers:\n","            obs.append(self.data[ticker].iloc[self.current_step] if self.current_step < len(self.data) else 0)\n","        obs.extend(self.portfolio_weights)\n","        return np.array(obs)"],"metadata":{"id":"impaX6xsUt9Y","executionInfo":{"status":"ok","timestamp":1727062366440,"user_tz":-480,"elapsed":8,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}}},"execution_count":95,"outputs":[]},{"cell_type":"markdown","source":["# 創建訓練環境\n"],"metadata":{"id":"WYUk3F_uCFe3"}},{"cell_type":"code","source":["from stable_baselines3.common.vec_env import DummyVecEnv\n","from stable_baselines3.common.monitor import Monitor\n","\n","# 创建训练环境并进行监控\n","train_env = PortfolioEnv(train_data)\n","train_env = Monitor(train_env)  # Optional: track statistics\n","train_env = DummyVecEnv([lambda: train_env])  # Vectorize environment for Stable Baselines3\n"],"metadata":{"id":"iY8ojPUNUu81","executionInfo":{"status":"ok","timestamp":1727062383019,"user_tz":-480,"elapsed":472,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}}},"execution_count":96,"outputs":[]},{"cell_type":"markdown","source":["# 創建SAC模型、訓練模型"],"metadata":{"id":"KEA7xq40QnZ_"}},{"cell_type":"code","source":["model = SAC('MlpPolicy', env, verbose=1)\n","model.learn(total_timesteps=10000)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tIbe1IOhzZz1","executionInfo":{"status":"ok","timestamp":1727062715210,"user_tz":-480,"elapsed":330365,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}},"outputId":"67b59316-5765-4425-c185-3adb557f1f9a"},"execution_count":97,"outputs":[{"output_type":"stream","name":"stdout","text":["Using cpu device\n","Wrapping the env with a `Monitor` wrapper\n","Wrapping the env in a DummyVecEnv.\n","----------------------------------\n","| rollout/           |           |\n","|    ep_len_mean     | 200       |\n","|    ep_rew_mean     | -1.33e+03 |\n","| time/              |           |\n","|    episodes        | 4         |\n","|    fps             | 35        |\n","|    time_elapsed    | 22        |\n","|    total_timesteps | 800       |\n","| train/             |           |\n","|    actor_loss      | 21        |\n","|    critic_loss     | 0.26      |\n","|    ent_coef        | 0.813     |\n","|    ent_coef_loss   | -0.314    |\n","|    learning_rate   | 0.0003    |\n","|    n_updates       | 699       |\n","----------------------------------\n","---------------------------------\n","| rollout/           |          |\n","|    ep_len_mean     | 200      |\n","|    ep_rew_mean     | -1.4e+03 |\n","| time/              |          |\n","|    episodes        | 8        |\n","|    fps             | 32       |\n","|    time_elapsed    | 49       |\n","|    total_timesteps | 1600     |\n","| train/             |          |\n","|    actor_loss      | 43.1     |\n","|    critic_loss     | 0.283    |\n","|    ent_coef        | 0.65     |\n","|    ent_coef_loss   | -0.562   |\n","|    learning_rate   | 0.0003   |\n","|    n_updates       | 1499     |\n","---------------------------------\n","----------------------------------\n","| rollout/           |           |\n","|    ep_len_mean     | 200       |\n","|    ep_rew_mean     | -1.28e+03 |\n","| time/              |           |\n","|    episodes        | 12        |\n","|    fps             | 31        |\n","|    time_elapsed    | 75        |\n","|    total_timesteps | 2400      |\n","| train/             |           |\n","|    actor_loss      | 62.2      |\n","|    critic_loss     | 0.202     |\n","|    ent_coef        | 0.534     |\n","|    ent_coef_loss   | -0.593    |\n","|    learning_rate   | 0.0003    |\n","|    n_updates       | 2299      |\n","----------------------------------\n","----------------------------------\n","| rollout/           |           |\n","|    ep_len_mean     | 200       |\n","|    ep_rew_mean     | -1.09e+03 |\n","| time/              |           |\n","|    episodes        | 16        |\n","|    fps             | 31        |\n","|    time_elapsed    | 102       |\n","|    total_timesteps | 3200      |\n","| train/             |           |\n","|    actor_loss      | 71.8      |\n","|    critic_loss     | 0.33      |\n","|    ent_coef        | 0.456     |\n","|    ent_coef_loss   | -0.508    |\n","|    learning_rate   | 0.0003    |\n","|    n_updates       | 3099      |\n","----------------------------------\n","---------------------------------\n","| rollout/           |          |\n","|    ep_len_mean     | 200      |\n","|    ep_rew_mean     | -901     |\n","| time/              |          |\n","|    episodes        | 20       |\n","|    fps             | 31       |\n","|    time_elapsed    | 128      |\n","|    total_timesteps | 4000     |\n","| train/             |          |\n","|    actor_loss      | 75.6     |\n","|    critic_loss     | 0.432    |\n","|    ent_coef        | 0.393    |\n","|    ent_coef_loss   | -0.398   |\n","|    learning_rate   | 0.0003   |\n","|    n_updates       | 3899     |\n","---------------------------------\n","---------------------------------\n","| rollout/           |          |\n","|    ep_len_mean     | 200      |\n","|    ep_rew_mean     | -766     |\n","| time/              |          |\n","|    episodes        | 24       |\n","|    fps             | 30       |\n","|    time_elapsed    | 155      |\n","|    total_timesteps | 4800     |\n","| train/             |          |\n","|    actor_loss      | 60.7     |\n","|    critic_loss     | 0.636    |\n","|    ent_coef        | 0.332    |\n","|    ent_coef_loss   | -0.468   |\n","|    learning_rate   | 0.0003   |\n","|    n_updates       | 4699     |\n","---------------------------------\n","---------------------------------\n","| rollout/           |          |\n","|    ep_len_mean     | 200      |\n","|    ep_rew_mean     | -686     |\n","| time/              |          |\n","|    episodes        | 28       |\n","|    fps             | 30       |\n","|    time_elapsed    | 183      |\n","|    total_timesteps | 5600     |\n","| train/             |          |\n","|    actor_loss      | 69.9     |\n","|    critic_loss     | 0.688    |\n","|    ent_coef        | 0.276    |\n","|    ent_coef_loss   | -0.327   |\n","|    learning_rate   | 0.0003   |\n","|    n_updates       | 5499     |\n","---------------------------------\n","---------------------------------\n","| rollout/           |          |\n","|    ep_len_mean     | 200      |\n","|    ep_rew_mean     | -616     |\n","| time/              |          |\n","|    episodes        | 32       |\n","|    fps             | 30       |\n","|    time_elapsed    | 210      |\n","|    total_timesteps | 6400     |\n","| train/             |          |\n","|    actor_loss      | 66.1     |\n","|    critic_loss     | 1.67     |\n","|    ent_coef        | 0.23     |\n","|    ent_coef_loss   | -0.457   |\n","|    learning_rate   | 0.0003   |\n","|    n_updates       | 6299     |\n","---------------------------------\n","---------------------------------\n","| rollout/           |          |\n","|    ep_len_mean     | 200      |\n","|    ep_rew_mean     | -557     |\n","| time/              |          |\n","|    episodes        | 36       |\n","|    fps             | 30       |\n","|    time_elapsed    | 236      |\n","|    total_timesteps | 7200     |\n","| train/             |          |\n","|    actor_loss      | 71.4     |\n","|    critic_loss     | 1.26     |\n","|    ent_coef        | 0.191    |\n","|    ent_coef_loss   | -0.252   |\n","|    learning_rate   | 0.0003   |\n","|    n_updates       | 7099     |\n","---------------------------------\n","---------------------------------\n","| rollout/           |          |\n","|    ep_len_mean     | 200      |\n","|    ep_rew_mean     | -516     |\n","| time/              |          |\n","|    episodes        | 40       |\n","|    fps             | 30       |\n","|    time_elapsed    | 263      |\n","|    total_timesteps | 8000     |\n","| train/             |          |\n","|    actor_loss      | 55.4     |\n","|    critic_loss     | 1.18     |\n","|    ent_coef        | 0.164    |\n","|    ent_coef_loss   | -0.652   |\n","|    learning_rate   | 0.0003   |\n","|    n_updates       | 7899     |\n","---------------------------------\n","---------------------------------\n","| rollout/           |          |\n","|    ep_len_mean     | 200      |\n","|    ep_rew_mean     | -504     |\n","| time/              |          |\n","|    episodes        | 44       |\n","|    fps             | 30       |\n","|    time_elapsed    | 289      |\n","|    total_timesteps | 8800     |\n","| train/             |          |\n","|    actor_loss      | 63       |\n","|    critic_loss     | 3.69     |\n","|    ent_coef        | 0.145    |\n","|    ent_coef_loss   | -0.53    |\n","|    learning_rate   | 0.0003   |\n","|    n_updates       | 8699     |\n","---------------------------------\n","---------------------------------\n","| rollout/           |          |\n","|    ep_len_mean     | 200      |\n","|    ep_rew_mean     | -472     |\n","| time/              |          |\n","|    episodes        | 48       |\n","|    fps             | 30       |\n","|    time_elapsed    | 316      |\n","|    total_timesteps | 9600     |\n","| train/             |          |\n","|    actor_loss      | 51       |\n","|    critic_loss     | 3.1      |\n","|    ent_coef        | 0.124    |\n","|    ent_coef_loss   | -0.277   |\n","|    learning_rate   | 0.0003   |\n","|    n_updates       | 9499     |\n","---------------------------------\n"]},{"output_type":"execute_result","data":{"text/plain":["<stable_baselines3.sac.sac.SAC at 0x7a8e5a656470>"]},"metadata":{},"execution_count":97}]},{"cell_type":"markdown","source":["# 測試環境"],"metadata":{"id":"FXJaiY5gPv1Q"}},{"cell_type":"code","source":["test_env = Monitor(PortfolioEnv(test_data))\n","test_env = DummyVecEnv([lambda: test_env])"],"metadata":{"id":"Vm16lnsoUvzy","executionInfo":{"status":"ok","timestamp":1727062718374,"user_tz":-480,"elapsed":412,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}}},"execution_count":98,"outputs":[]},{"cell_type":"markdown","source":["# 測試模型"],"metadata":{"id":"fb79_-00Q6KE"}},{"cell_type":"code","source":["obs = test_env.reset()[0]  # Get the first element (observation)\n","underlying_env = test_env.envs[0] # Get the underlying environment from the DummyVecEnv\n","total_rewards = 0\n","\n","for _ in range(len(test_data) - 1):\n","    action, _ = model.predict(obs)\n","    obs, reward, done, _ = test_env.step(action)\n","    total_rewards += reward\n","    if done:\n","        break\n","\n","print(f'Total Rewards: {total_rewards}')\n","print(f'Final Balance: {underlying_env.balance}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GBvFq90e05sh","executionInfo":{"status":"ok","timestamp":1727062817023,"user_tz":-480,"elapsed":352,"user":{"displayName":"黃心薇","userId":"14786649425175479972"}},"outputId":"db944826-b911-4044-df3d-45bb8e353f6d"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["Total Rewards: 0\n","Final Balance: 1000000\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/gymnasium/core.py:311: UserWarning: \u001b[33mWARN: env.balance to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.balance` for environment variables or `env.get_wrapper_attr('balance')` that will search the reminding wrappers.\u001b[0m\n","  logger.warn(\n"]}]}]}